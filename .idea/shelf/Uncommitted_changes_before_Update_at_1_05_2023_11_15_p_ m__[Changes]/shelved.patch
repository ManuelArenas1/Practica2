Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.regex.Pattern;\r\npublic class Main {\r\n    public static void ventasNYC(List<Ventas> ventasList){\r\n    ventasList.stream()\r\n            .filter(v -> v.getCity().equals(\"NYC\"))\r\n            .forEach(v -> {\r\n                System.out.print(\"orderNumber: \" + v.getOrderNumber() + \", \");\r\n                System.out.print(\"quantityOrdered: \" + v.getQuantityOrdered() + \", \");\r\n                System.out.print(\"priceEach: \" + v.getPriceEach() + \", \");\r\n                System.out.print(\"orderLineNumber: \" + v.getOrderLineNumber() + \", \");\r\n                System.out.print(\"sales: \" + v.getSales() + \", \");\r\n                System.out.print(\"orderDate: \" + v.getOrderDate() + \", \");\r\n                System.out.print(\"status: \" + v.getStatus() + \", \");\r\n                System.out.print(\"qtr_id: \" + v.getQtrId() + \", \");\r\n                System.out.print(\"month_id: \" + v.getMonthId() + \", \");\r\n                System.out.print(\"year_id: \" + v.getYearId() + \", \");\r\n                System.out.print(\"productLine: \" + v.getProductLine() + \", \");\r\n                System.out.print(\"msrp: \" + v.getMsrp() + \", \");\r\n                System.out.print(\"productCode: \" + v.getProductCode() + \", \");\r\n                System.out.print(\"customerName: \" + v.getCustomerName() + \", \");\r\n                System.out.print(\"phone: \" + v.getPhone() + \", \");\r\n                System.out.print(\"adressLine1: \" + v.getAddressLine1() + \", \");\r\n                System.out.print(\"adressLine2: \" + v.getAddressLine2() + \", \");\r\n                System.out.print(\"city: \" + v.getCity() + \", \");\r\n                System.out.print(\"state: \" + v.getState() + \", \");\r\n                System.out.print(\"postalCode: \" + v.getPostalCode() + \", \");\r\n                System.out.print(\"country: \" + v.getCountry() + \", \");\r\n                System.out.print(\"territory: \" + v.getTerritory() + \", \");\r\n                System.out.print(\"contactLastName: \" + v.getContactLastName() + \", \");\r\n                System.out.print(\"contactFirstName: \" + v.getContactFirstName() + \", \");\r\n                System.out.println(\"dealSize: \" + v.getDealSize());\r\n            });\r\n    }\r\n\r\n    public static double ventasNewYork(List<Ventas> ventasList, String city){\r\n        return ventasList.stream()\r\n                .filter(v -> {\r\n                    return v.getCity().equals(city);\r\n                })\r\n                .mapToDouble(v -> v.getSales())\r\n                .sum();\r\n    }\r\n\r\n    public static int carrosClasicosNYC(List<Ventas> ventasList, String city) {\r\n        return ventasList.stream()\r\n                .filter(v -> {\r\n                    return v.getCity().equals(city) && v.getProductLine().equals(\"Classic Cars\");\r\n                })\r\n                .mapToInt(v -> v.getQuantityOrdered())\r\n                .sum();\r\n    }\r\n    public static double ventasCarrosClasicosNYC(List<Ventas> ventasList, String city){\r\n        return ventasList.stream()\r\n                .filter(v-> {\r\n                    return v.getCity().equals(city) && v.getProductLine().equals(\"Classic Cars\");\r\n                })\r\n                .mapToDouble(v-> v.getSales())\r\n                .sum();\r\n\r\n    }\r\n    public static int motocicletasNYC(List<Ventas> ventasList, String city){\r\n        return ventasList.stream()\r\n                .filter(v -> {\r\n                    return v.getCity().equals(city) && v.getProductLine().equals(\"Motorcycles\");\r\n                })\r\n                .mapToInt(v -> v.getQuantityOrdered())\r\n                .sum();\r\n    }\r\n\r\n    public static double ventasMotocicletasNYC(List<Ventas> ventasList, String city){\r\n        return ventasList.stream()\r\n                .filter(v -> {\r\n                    return v.getCity().equals(city) && v.getProductLine().equals(\"Motorcycles\");\r\n                })\r\n                .mapToDouble(v -> v.getSales())\r\n                .sum();\r\n    }\r\n\r\n\r\n\r\n    public static String clienteMasAutosComproEnNY(List<Ventas> ventasList) {\r\n        Map<String, Integer> cantidadAutosPorCliente = new HashMap<>();\r\n        ventasList.stream()\r\n                .filter(v -> v.getCity().equals(\"NYC\") && (v.getProductLine().equals(\"Classic Cars\") || v.getProductLine().equals(\"Vintage Cars\")))\r\n                .forEach(v -> {\r\n                    String cliente = v.getCustomerName();\r\n                    Integer cantidadAutos = v.getQuantityOrdered();\r\n                    cantidadAutosPorCliente.put(cliente, cantidadAutosPorCliente.getOrDefault(cliente, 0) + cantidadAutos);\r\n                });\r\n        return cantidadAutosPorCliente.entrySet().stream()\r\n                .max(Map.Entry.comparingByValue())\r\n                .map(Map.Entry::getKey)\r\n                .orElse(\"\");\r\n    }\r\n\r\n    public static String clienteMasCompro(List<Ventas> ventasList) {\r\n        Map<String, Integer> cantidadPorCliente = new HashMap<>();\r\n        ventasList.forEach(v -> {\r\n            String cliente = v.getCustomerName();\r\n            Integer cantidad = v.getQuantityOrdered();\r\n            cantidadPorCliente.put(cliente, cantidadPorCliente.getOrDefault(cliente, 0) + cantidad);\r\n        });\r\n        return cantidadPorCliente.entrySet().stream()\r\n                .max(Map.Entry.comparingByValue())\r\n                .map(Map.Entry::getKey)\r\n                .orElse(\"No hay cliente que compró más\");\r\n    }\r\n\r\n    public static String clienteMenosCompro(List<Ventas> ventasList) {\r\n        Map<String, Integer> cantidadPorCliente = new HashMap<>();\r\n        ventasList.forEach(v -> {\r\n            String cliente = v.getCustomerName();\r\n            Integer cantidad = v.getQuantityOrdered();\r\n            cantidadPorCliente.put(cliente, cantidadPorCliente.getOrDefault(cliente, 0) + cantidad);\r\n        });\r\n        return cantidadPorCliente.entrySet().stream()\r\n                .min(Map.Entry.comparingByValue())\r\n                .map(Map.Entry::getKey)\r\n                .orElse(\"No hay un cliente que compró menos\");\r\n    }\r\n\r\n\r\n\r\n\r\n    public static List<Ventas> readVentasFromFile(String fileName) throws IOException {\r\n        List<Ventas> ventasList = new ArrayList<>();        //Creando una colección de reducción mutable\r\n\r\n        Pattern pattern = Pattern.compile(\"^(\\\\d+),\\\"(\\\\d+)\\\",\\\"(\\\\d+\\\\.\\\\d+)\\\",(\\\\d+),(\\\\d+\\\\.\\\\d+),\\\"([\\\\d/]+)\\\",\\\"(\\\\w+)\\\",(\\\\d+),(\\\\d+),(\\\\d+),\\\"(.+)\\\",(\\\\d+),\\\"(\\\\w+)\\\",\\\"(.+)\\\",\\\"(.+)\\\",\\\"(.+)\\\",\\\"(.+)\\\",\\\"(.+)\\\",(\\\\w+),(\\\\w+),(\\\\d+),\\\"(.+)\\\",\\\"(.+)\\\",\\\"(.+)\\\",(\\\\d+\\\\.\\\\d+)\\\",(\\\\w+)\\\"(.+)\\\",\\\"(.+)\\\",\\\"(\\\\w+)\\\"$\");\r\n\r\n\r\n        //Las proximas lineas abren el archivo .csv y guarda los datos usando los setters de cada atributo\r\n        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\r\n            ventasList = br.lines()\r\n                    .skip(1) // skip header\r\n                    .map(line -> {\r\n                        Ventas ventas = new Ventas();\r\n                        String[] fields = pattern.matcher(line).replaceAll(\"$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25\").split(\",\");\r\n                        ventas.setOrderNumber(Integer.parseInt(fields[0]));\r\n                        ventas.setQuantityOrdered(Integer.parseInt(fields[1]));\r\n                        ventas.setPriceEach(Double.parseDouble(fields[2]));\r\n                        ventas.setOrderLineNumber(Integer.parseInt(fields[3]));\r\n                        ventas.setSales(Double.parseDouble(fields[4]));\r\n                        ventas.setOrderDate(fields[5]);\r\n                        ventas.setStatus(fields[6]);\r\n                        ventas.setQtrId(Integer.parseInt(fields[7]));\r\n                        ventas.setMonthId(Integer.parseInt(fields[8]));\r\n                        ventas.setYearId(Integer.parseInt(fields[9]));\r\n                        ventas.setProductLine(fields[10]);\r\n                        ventas.setMsrp(Integer.parseInt(fields[11]));\r\n                        ventas.setProductCode(fields[12]);\r\n                        ventas.setCustomerName(fields[13]);\r\n                        ventas.setPhone(fields[14]);\r\n                        ventas.setAddressLine1(fields[15]);\r\n                        ventas.setAddressLine2(fields[16]);\r\n                        ventas.setCity(fields[17]);\r\n                        ventas.setState(fields[18]);\r\n                        ventas.setPostalCode(fields[19]);\r\n                        ventas.setCountry(fields[20]);\r\n                        ventas.setTerritory(fields[21]);\r\n                        ventas.setContactLastName(fields[22]);\r\n                        ventas.setContactFirstName(fields[23]);\r\n                        ventas.setDealSize(fields[24]);\r\n                        return ventas;\r\n                    })\r\n                    .toList();\r\n        }\r\n\r\n        return ventasList;\r\n    }\r\n\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        List<Ventas> ventasList = Main.readVentasFromFile(\"C:\\\\Users\\\\Asus\\\\IdeaProjects\\\\Practica2\\\\src\\\\sales_data.csv\");      //Esta linea busca el archivo .csv\r\n\r\n        Main.ventasNYC(ventasList);\r\n        System.out.println(\"El total de ventas de New York es de: \" + Main.ventasNewYork(ventasList, \"NYC\"));\r\n        System.out.println(\"New York vendió \" + Main.carrosClasicosNYC(ventasList, \"NYC\") + \" autos clásicos\");\r\n        System.out.println(\"El total de ventas de autos clásicos en New York es de : \" + Main.ventasCarrosClasicosNYC(ventasList, \"NYC\"));\r\n        System.out.println(\"New York vendió \" + Main.motocicletasNYC(ventasList, \"NYC\") + \" motocicletas\");\r\n        System.out.println(\"El total de ventas de motocicletas en New York es de : \" + Main.ventasMotocicletasNYC(ventasList, \"NYC\"));\r\n        System.out.println(\"El cliente que más autos compró en New York es: \" + Main.clienteMasAutosComproEnNY(ventasList));\r\n        System.out.println(\"El cliente que más compró es: \" + Main.clienteMasCompro(ventasList));\r\n        System.out.println(\"El cliente que menos compró es: \" + Main.clienteMenosCompro(ventasList));\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	(revision fcd24d8a437ea8ebfb71b3f557aa750ed3d77b52)
+++ b/src/Main.java	(date 1682997237816)
@@ -130,12 +130,12 @@
 
 
     public static List<Ventas> readVentasFromFile(String fileName) throws IOException {
-        List<Ventas> ventasList = new ArrayList<>();        //Creando una colección de reducción mutable
+        List<Ventas> ventasList = new ArrayList<>();
 
         Pattern pattern = Pattern.compile("^(\\d+),\"(\\d+)\",\"(\\d+\\.\\d+)\",(\\d+),(\\d+\\.\\d+),\"([\\d/]+)\",\"(\\w+)\",(\\d+),(\\d+),(\\d+),\"(.+)\",(\\d+),\"(\\w+)\",\"(.+)\",\"(.+)\",\"(.+)\",\"(.+)\",\"(.+)\",(\\w+),(\\w+),(\\d+),\"(.+)\",\"(.+)\",\"(.+)\",(\\d+\\.\\d+)\",(\\w+)\"(.+)\",\"(.+)\",\"(\\w+)\"$");
 
 
-        //Las proximas lineas abren el archivo .csv y guarda los datos usando los setters de cada atributo
+        //se abre el csv y se guardan los datos
         try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
             ventasList = br.lines()
                     .skip(1) // skip header
@@ -177,7 +177,7 @@
 
 
     public static void main(String[] args) throws IOException {
-        List<Ventas> ventasList = Main.readVentasFromFile("C:\\Users\\Asus\\IdeaProjects\\Practica2\\src\\sales_data.csv");      //Esta linea busca el archivo .csv
+        List<Ventas> ventasList = Main.readVentasFromFile("C:\\Users\\Asus\\IdeaProjects\\Practica2\\src\\sales_data.csv");      //aca se busca y abre el archivo csv
 
         Main.ventasNYC(ventasList);
         System.out.println("El total de ventas de New York es de: " + Main.ventasNewYork(ventasList, "NYC"));
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"d62ded7d-2fc7-4f86-9a3b-93d05e191e5d\" name=\"Changes\" comment=\"Practica 2&#10;Manuel Arenas&#10;Marcelo Castro.&#10;&#10;En este proyecto se leen los datos desde un archivo csv, y se crea una lista utilizando el stream, lambda en bloque y el .map\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$PROJECT_DIR$/src/Main.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2PDZAUOBrpztw5R1w8tOY8RjwiP\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <OptionsSetting value=\"false\" id=\"Update\" />\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  },\r\n  \"keyToStringList\": {\r\n    \"ChangesTree.GroupingKeys\": [\r\n      \"module\",\r\n      \"directory\"\r\n    ]\r\n  }\r\n}]]></component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"d62ded7d-2fc7-4f86-9a3b-93d05e191e5d\" name=\"Changes\" comment=\"\" />\r\n      <created>1682993477532</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1682993477532</updated>\r\n      <workItem from=\"1682993478813\" duration=\"2866000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Practica 2&#10;Manuel Arenas&#10;Marcelo Castro.&#10;&#10;En este proyecto se leen los datos desde un archivo csv, y se crea una lista utilizando el stream, lambda en bloque y el .map\">\r\n      <created>1682996152487</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1682996152487</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"nvghghfgh\" />\r\n    <MESSAGE value=\"Practica 2&#10;Manuel Arenas&#10;Marcelo Castro.&#10;&#10;En este proyecto se leen los datos desde un archivo csv, y se crea una lista utilizando el stream, lambda en bloque y el .map\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Practica 2&#10;Manuel Arenas&#10;Marcelo Castro.&#10;&#10;En este proyecto se leen los datos desde un archivo csv, y se crea una lista utilizando el stream, lambda en bloque y el .map\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/Main.java</url>\r\n          <line>155</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision fcd24d8a437ea8ebfb71b3f557aa750ed3d77b52)
+++ b/.idea/workspace.xml	(date 1682997237894)
@@ -1,7 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="d62ded7d-2fc7-4f86-9a3b-93d05e191e5d" name="Changes" comment="Practica 2&#10;Manuel Arenas&#10;Marcelo Castro.&#10;&#10;En este proyecto se leen los datos desde un archivo csv, y se crea una lista utilizando el stream, lambda en bloque y el .map" />
+    <list default="true" id="d62ded7d-2fc7-4f86-9a3b-93d05e191e5d" name="Changes" comment="Practica 2&#10;Manuel Arenas&#10;Marcelo Castro.&#10;&#10;En este proyecto se leen los datos desde un archivo csv, y se crea una lista utilizando el stream, lambda en bloque y el .map">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Main.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -37,6 +40,10 @@
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "WebServerToolWindowFactoryState": "false",
+    "project.structure.last.edited": "Project",
+    "project.structure.proportion": "0.0",
+    "project.structure.side.proportion": "0.0",
+    "settings.editor.selected.configurable": "org.jetbrains.plugins.github.ui.GithubSettingsConfigurable",
     "vue.rearranger.settings.migration": "true"
   },
   "keyToStringList": {
@@ -54,7 +61,7 @@
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
       <updated>1682993477532</updated>
-      <workItem from="1682993478813" duration="2866000" />
+      <workItem from="1682993478813" duration="3715000" />
     </task>
     <task id="LOCAL-00001" summary="Practica 2&#10;Manuel Arenas&#10;Marcelo Castro.&#10;&#10;En este proyecto se leen los datos desde un archivo csv, y se crea una lista utilizando el stream, lambda en bloque y el .map">
       <created>1682996152487</created>
@@ -63,7 +70,14 @@
       <option name="project" value="LOCAL" />
       <updated>1682996152487</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="Practica 2&#10;Manuel Arenas&#10;Marcelo Castro.&#10;&#10;En este proyecto se leen los datos desde un archivo csv, y se crea una lista utilizando el stream, lambda en bloque y el .map">
+      <created>1682996388106</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1682996388106</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -85,15 +99,4 @@
     <MESSAGE value="Practica 2&#10;Manuel Arenas&#10;Marcelo Castro.&#10;&#10;En este proyecto se leen los datos desde un archivo csv, y se crea una lista utilizando el stream, lambda en bloque y el .map" />
     <option name="LAST_COMMIT_MESSAGE" value="Practica 2&#10;Manuel Arenas&#10;Marcelo Castro.&#10;&#10;En este proyecto se leen los datos desde un archivo csv, y se crea una lista utilizando el stream, lambda en bloque y el .map" />
   </component>
-  <component name="XDebuggerManager">
-    <breakpoint-manager>
-      <breakpoints>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/src/Main.java</url>
-          <line>155</line>
-          <option name="timeStamp" value="1" />
-        </line-breakpoint>
-      </breakpoints>
-    </breakpoint-manager>
-  </component>
 </project>
\ No newline at end of file
